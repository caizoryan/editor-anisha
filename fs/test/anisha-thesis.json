{
  "blocks": [
    {
      "type": "load-component",
      "id": "ctkln",
      "start": 0,
      "drag_x": 35.95947368653305,
      "drag_y": 94.0131578366737,
      "path": "",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 300,
      "drag_h": 50
    },
    {
      "type": "save-component",
      "id": "zp9lli",
      "start": 0,
      "drag_x": 31.94382665983347,
      "drag_y": 191.95004593369575,
      "path": "test/anisha-thesis.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 450,
      "drag_h": 60,
      "autosave": true
    },
    {
      "type": "md",
      "id": "shx5x",
      "active": false,
      "focus": false,
      "start": 0,
      "drag_x": 353.7752221511353,
      "drag_y": 498.31209751886513,
      "drag_w": 600,
      "drag_h": 400,
      "md": "## Setup\n- ~~Load video files~~\n- Make a video manager (manage the plane, play, etc)\n\n## Transition\n- Decision buttons\n- transition animation or whatever",
      "output": ""
    },
    {
      "type": "code",
      "output": "import {if_then,mounted,mem,mut, eff_on, render, sig_set as sig, h} from \"/lib/tapri/monke.js\"\nimport {hdom} from \"/lib/tapri/hdom/index.js\"\nimport { THREE, addons } from \"/lib/threejs/three.js\"\nimport {Keymanager} from \"/lib/keymanager.js\"\n\nconst M = mut({\n  fn: {},\n  eff_on: [],\n  off: {\n    x: 0,\n    y: -10,\n    z: -.1,\n  }\n})\n\ndocument.M = M\n\n// basic styling\nlet style = document.createElement(\"style\")\nstyle.innerText= `*{padding: 0;margin:0}`\ndocument.head.appendChild(style)\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera( 85, window.innerWidth / window.innerHeight, 0.1, 1000 );\nconst orbit = addons.OrbitControls\nconst loader = new THREE.TextureLoader()\nconst renderer = new THREE.WebGLRenderer();\n\nfunction initTHREE(){\n  renderer.setSize( window.innerWidth, window.innerHeight );\n  document.querySelector(\"#THREE\")?.appendChild( renderer.domElement );\n  animate()\n}\n\n\nfunction apply_offset(){ }\n\nlet c = new orbit(camera, renderer.domElement)\ncamera.position.z = 5;\nc.update()\n\nlet keys = new Keymanager()\nkeys.on(\"ArrowUp\", () => camera.position.z -= 2)\nkeys.on(\"ArrowDown\", () => camera.position.z += 2)\n\nwindow.addEventListener(\"keydown\",(e) => keys.event(e))\n\nfunction animate() {\n  requestAnimationFrame(animate)\n  renderer.render( scene, camera );\n  c.update()\n}\n\nlet css = mut([\"\"])\nlet css_str = mem(() => css.join(`\\n`))\n\nconst Root = () => {\n  mounted(initTHREE)\n  let style = `\n    all: unset;\n    color: white;\n    font-family: monospace;\n    border: 1px dotted #fff8;\n    padding: .5em;\n  `\n\n  let container = `\n    position: fixed;\n    bottom: 2em;\n    left: 5em;\n  `\n\n  const play_fn = (i) => () => {\n    decision_tree.forEach(n => {\n      n.controller?.focus(false)\n      n.controller?.pause()\n    })\n    \n    decision_tree[i].controller?.focus(true)\n    decision_tree[i].controller?.seek(0)\n    decision_tree[i].controller?.play()\n  }\n  \n  let button = decision_tree.map((node, i) => [\n    \"button\",\n    {style, \n     onclick: play_fn(i)},\n    node.src\n  ])\n\n  let debug = sig(false)\n  let debug_style = `\n  `\n  let d = hdom([\"#debug\", {style: debug_style}, () => if_then([debug, DebugDom])])\n  \n  let three = () => \n    hdom([\"#THREE\",  \n     [\"#container\", {style: container},  button ], () => d])\n  \n  return hdom(\n    [\"div\",\n      [\"style\", css_str],\n      [\".main\",  three]]\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "start": 0,
      "drag_x": 1115.533051296843,
      "drag_y": 314.2519356240828,
      "focused": false,
      "cursor": 2069,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    },
    {
      "type": "code",
      "id": "he3gnn",
      "start": 2375,
      "drag_x": 1820.1371397277696,
      "drag_y": 670.9804086103186,
      "focused": false,
      "output": "\n/**\n@typedef {Object} vec3 \n@property {number} vec3.x\n@property {number} vec3.y\n@property {number} vec3.z\n\n@param {vec3} vec1\n@param {vec3} vec2\n*/\nfunction eq(vec1, vec2){\n  return vec1.x === vec2.x \n    && vec1.y == vec2.y\n    && vec1.z == vec2.z\n}\n\n\nfunction shuffle(arr) {\n  return arr.sort(() => Math.random() > .5 ? 1 : -1)\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 730
    },
    {
      "type": "code",
      "id": "v2a3aw",
      "start": 2750,
      "drag_x": 2515.8732356681644,
      "drag_y": 1120.9098588534523,
      "focused": false,
      "output": "/**\n@typedef {{\n  text: string,\n  next: number,\n}} Decision \n\n@typedef {{\n  text: string,\n  start: number,\n  end: number,\n}} Subtitle\n*/\n\n/**\n@typedef {{\n  src: string,\n  options: Decision[],\n  subtitles: Subtitle[],\n  controller: (null | {\n    play: () => void,\n    pause: () => void,\n    seek: (num: number) => void,\n    focus: (to_focus: boolean) => void\n  })\n}} SourceNode \n*/\n\n/**\n@type {SourceNode[]}\n*/\n\nlet decision_tree = await fetch(\"/fs/data/anisha_thesis_timeline_data.json\").then((res) => res.json())\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    },
    {
      "type": "code",
      "id": "mf4rl",
      "start": 3276,
      "drag_x": 4393.437441085362,
      "drag_y": 2320.2884292730214,
      "focused": false,
      "output": "/**\n@description make sure video is loaded\n@param {HTMLVideoElement} video \n*/\nfunction create_video_plane(video){\n  // make a video element\n  // video will always be 4:3\n  // make plane that size\n  const texture = new THREE.VideoTexture(video)\n  \n  const geometry = new THREE.PlaneGeometry(8, 6)\n  \n  const material = new THREE.MeshBasicMaterial({\n    map: texture,\n    // opacity: .2,\n    // transparent: true,\n    // use texture of video\n  })\n  const plane = new THREE.Mesh(geometry, material);\n\n  return plane\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 970
    },
    {
      "type": "code",
      "id": "uhjqp5",
      "active": true,
      "focus": true,
      "start": 3830,
      "drag_x": 5043.437441085362,
      "drag_y": 2320.2884292730214,
      "drag_w": 600,
      "drag_h": 732.8124473700041,
      "focused": false,
      "output": "/* -------------------\n.debug div\n<(cur)>\n------------------------\n.main-frame\n[ video     ][ options ]\n[           ][         ]\n[           ][         ]\n---------------------\n.bottom\n[  timeline ][subtitles]\n\n---------------------*/\ncss.push(`\n  #debug{\n    position: fixed;\n    top: 1em;\n    left: 1em;\n    width: 60vw;\n    height: 95vh;\n    border: 1px dotted white;\n    background-color: #000;\n  }\n  \n  .debug-div {\n    color: white;\n    padding: 10px;\n  }\n\n  .debug-div button{\n    all: unset;\n    \n  }\n\n  .main-frame{\n    display: grid;\n    grid-template-columns: 60% 40%; \n    padding: 1em;\n    position: relative;\n  }\n\n  .options-menu {\n    background: black;\n    position: absolute;\n    top: 2em;\n    left: 2em;\n    width: 85%;\n    height: 85%;\n  }\n  \n  \n`\n)\n\nfunction DebugDom(){\n  let dt = mut(decision_tree)\n  let parent = \"/fs/media/anisha-thesis/\"\n  let cur = sig(0)\n  let showing_options = sig(false)\n  \n  let next = () => {\n    cur() + 1 >= dt.length \n    ? cur.set(0)\n    : cur.set(cur() + 1)\n  }\n  \n  let prev = () => {\n    cur() <= 0\n    ? cur.set(dt.length-1)\n    : cur.set(cur() - 1)\n  }\n\n  let src_on = (i) => parent+dt[i]?.src\n  let cur_src = mem(() => src_on(cur()))\n  let cur_options = mem(() =>dt[cur()]?.options)\n  \n  let add_to_cur = (text, next) => {\n    dt[cur()].options.push({text, next})\n  }\n\n  let show_options = () => {\n    showing_options.set(true)\n  }\n\n  let hide_options = () => {\n    show_options.set(false)\n  }\n  \n  let remove_cur_option=(i) => {\n    dt[cur()].options.splice(i, 1)\n  }\n\n    \n  let video_style = `width:300px;`\n  let video_smol  = `width: 85px;`\n\n  let options = hdom(\n    [\".options-menu\", dt.map((node, i) => \n      [\".option-btn\", {\n        onclick: () => add_to_cur(\"something\", i)\n      }, i, \" -> \", node.src])])\n\n  const nuxt = \n    (option, i) => hdom([\n      \"div\", \n        [\"video\", { \n          src: src_on(option.next), \n          style: video_smol, \n          controls: true\n        }],\n      \n        [\"button\", {onclick: () => remove_cur_option(i)}, \"x del x\"],\n        [\"p\", option.text],\n      ])\n  \n  let split = ``\n  \n  let video = [\n       \".main-frame\",\n       [\"video\", {src: cur_src, style : video_style, controls: true} ],\n       [\".next\", mem(() => cur_options()?.map(nuxt)),\n         [\"button\", {onclick: show_options}, \"add\"]\n        ]\n     ]\n\n  let save = () => {\n    // save to anisha_thesis_timeline_data.json\n    const body = {\n      content: JSON.stringify(dt, null, 2),\n    };\n\n    let path = \"data/anisha_thesis_timeline_data.json\"\n\n    fetch(\"/fs/\" + path, {\n      headers: { \"Content-Type\": \"application/json\" },\n      method: \"PUT\",\n      body: JSON.stringify(body),\n    });\n  }\n\n  let r = () => hdom(\n      [\".debug-div\",\n         // next prev\n         [\"div\", \n          [\"button\", {onclick:prev}, \"prev\"],\n          [\"span\", cur],\n          [\"button\", {onclick:next}, \"next\"],\n        ],\n        video,\n       [\"button\", {onclick: save}, \"save\"],\n       () => if_then([showing_options(), options])\n      ])\n  \n  return r\n}\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 497
    },
    {
      "type": "code",
      "id": "wcbpv2",
      "start": 6862,
      "drag_x": 5731.4967486589885,
      "drag_y": 2578.1067583454196,
      "focused": false,
      "output": "let root = \"/fs/media/anisha-thesis/\"\n\ndecision_tree.forEach((node) => {\n  let viddy = document.createElement(\"video\")\n  viddy.src = root + node.src\n  let f = create_video_plane(viddy)\n  f.position.x = 0\n  scene.add(f)\n\n  node.controller = {\n    play: () => viddy.play(),\n    pause: () => viddy.pause(),\n    seek: (t) => viddy.currentTime = t,\n    focus: (bool) => bool ? f.position.x = 0 : f.position.x = 10 \n  }\n})\n\nrender(Root, document.body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 530
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -4989.704646690723,
      "initialY": -2268.3825551222244,
      "initialZoom": 1
    },
    "buffer": [
      -1,
      -1,
      7,
      -1,
      -1
    ]
  }
}