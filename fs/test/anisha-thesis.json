{
  "blocks": [
    {
      "type": "load-component",
      "id": "ctkln",
      "start": 0,
      "drag_x": 35.95947368653305,
      "drag_y": 94.0131578366737,
      "path": "",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 300,
      "drag_h": 50
    },
    {
      "type": "save-component",
      "id": "zp9lli",
      "start": 0,
      "drag_x": 31.94382665983347,
      "drag_y": 191.95004593369575,
      "path": "test/anisha-thesis.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_w": 450,
      "drag_h": 60,
      "autosave": true
    },
    {
      "type": "md",
      "id": "shx5x",
      "active": false,
      "focus": false,
      "start": 0,
      "drag_x": 605,
      "drag_y": 288,
      "drag_w": 600,
      "drag_h": 400,
      "md": "## Setup\n- ~~Load video files~~\n- Make a video manager (manage the plane, play, etc)\n\n## Transition\n- Decision buttons\n- transition animation or whateverjk",
      "output": ""
    },
    {
      "type": "code",
      "output": "import {if_then,mounted,mem,mut, eff_on, render, sig_set as sig, h} from \"/lib/tapri/monke.js\"\nimport {hdom} from \"/lib/tapri/hdom/index.js\"\nimport { THREE, addons } from \"/lib/threejs/three.js\"\nimport {Keymanager} from \"/lib/keymanager.js\"\n\nconst M = mut({\n  fn: {},\n  eff_on: [],\n  off: {\n    x: 0,\n    y: -10,\n    z: -.1,\n  }\n})\n\ndocument.M = M\nlet ws = new WebSocket(\"ws://localhost:8881/data\")\n\nws.onopen = () => {\n    console.log(\"connected\")\n}\n\nlet cursor_x = sig(0)\nlet cursor_y = sig(0)\n\nlet cursor_move_x = (val) => {\n  // check if within bounds\n  if (cursor_x() + val < window.innerWidth \n      && cursor_x() + val > 0\n     ) cursor_x.set(cursor_x() + val)\n}\n\nlet cursor_move_y = (val) => {\n  // check if within bounds\n  if (cursor_y() + val < window.innerHeight \n      && cursor_y() + val > 0\n     ) cursor_y.set(cursor_y() + val)\n}\n\nlet scale = 40\n\nws.onmessage = (e) => {\n  let data = JSON.parse(e.data)\n  if (data.x > 580 && data.x < 900){\n    cursor_move_x(.5)\n  }\n  \n  if (data.x < 500 && data.x > 150) {\n    cursor_move_x(-.5)\n  }\n  \n  if (data.x > 900){\n    cursor_move_x(scale)\n  }\n  \n  if (data.x < 50){\n    cursor_move_x(-scale)\n  }\n  \n  if (data.y > 900){\n    cursor_move_y(scale)\n  }\n  \n  if (data.y < 50){\n    cursor_move_y(-scale)\n  }\n\n  \n}\n\n\n// basic styling\nlet style = document.createElement(\"style\")\nstyle.innerText= `*{padding: 0;margin:0}`\ndocument.head.appendChild(style)\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera( 85, window.innerWidth / window.innerHeight, 0.1, 1000 );\nconst orbit = addons.OrbitControls\nconst loader = new THREE.TextureLoader()\nconst renderer = new THREE.WebGLRenderer();\n\nfunction initTHREE(){\n  renderer.setSize( window.innerWidth, window.innerHeight );\n  document.querySelector(\"#THREE\")?.appendChild( renderer.domElement );\n  \n  animate()\n}\n\n\nfunction apply_offset(){ }\n\nlet c = new orbit(camera, renderer.domElement)\ncamera.position.z = 3.3;\nc.update()\n\nlet keys = new Keymanager()\nkeys.on(\"ArrowUp\", () => camera.position.z -= 2)\nkeys.on(\"ArrowDown\", () => camera.position.z += 2)\n\nwindow.addEventListener(\"keydown\",(e) => keys.event(e))\n\nfunction animate(d) {\n  requestAnimationFrame(animate)\n  \n  renderer.render( scene, camera );\n  c.update()\n}\n\n\nlet css = mut([`\n button.option {\n    border: 1px solid white;\n    background: #222a;\n    color: white;\n    font-size: 1.9em;\n    font-family: hermit;\n    min-width: 200px;\n    text-transform: uppercase;\n    padding: .5em;\n    margin-right: 3em;\n }\n\n button.selected.option {\n    background: white;\n    color: black;\n }\n \n button.option:hover {\n    background: white;\n    color: black;\n    cursor: crosshair;\n }\n\n`])\nlet css_str = mem(() => css.join(`\\n`))\nlet current = sig(0)\n\nlet hover_option = mem(() => {\n  // get cur buttons and its bounding box\n  // check if intersection between cursor and box\n  console.log(\"checking\")\n  let found = false\n  document.querySelectorAll(\"button.option\")\n    .forEach((el) => {\n      let {x, y, width, height} = el.getBoundingClientRect();\n      console.log(el, x)\n      if (cursor_x() > x && cursor_x() < x+width) \n      {\n        console.log(\"intersection!\")\n        found = true\n      }\n  })\n\n  return found\n})\n\nlet selected = sig(null)\n\nlet fns = () => {\n  return cursor_x() && cursor_y()\n}\n\neff_on(fns, () => {\n  console.log(\"checking\")\n  let found = null\n  document.querySelectorAll(\"button.option\")\n    .forEach((el) => {\n      let {x, y, width, height} = el.getBoundingClientRect();\n      console.log(el, x)\n      if (\n        // x position\n        cursor_x() > x && cursor_x() < x+width\n        &&\n        // y position\n        \n        cursor_y() > y && cursor_y() < y+height\n      ) \n      {\n        console.log(\"intersection!\", el.getAttribute(\"index\"))\n        found = parseInt(el.getAttribute(\"index\"))\n      }\n  })\n\n  selected.set(found)\n  console.log(\"selected\", selected())\n})\n\nconst play_fn = (i) => () => {\n  decision_tree.forEach(n => {\n    n.controller?.focus(false)\n    n.controller?.pause()\n  })\n  \n  current.set(i)\n  decision_tree[i].controller?.play()\n}\n\nsetTimeout(() => {\n  play_fn(12)()\n}, 100)\n\nconst Root = () => {\n  setTimeout(() => {\n    decision_tree.forEach(n => {\n      n.controller?.focus(false)\n      n.controller?.pause()\n    })\n  }, 5)\n  \n  mounted(initTHREE)\n  let style = `\n    all: unset;\n    color: white;\n    font-family: monospace;\n    border: 1px dotted #fff8;\n    padding: .5em;\n  `\n\n  let cursor_style = mem(() => `\n    width: 20px;\n    height: 20px;\n    position: fixed;\n    top: ${cursor_y()}px;\n    left: ${cursor_x()}px;\n    background-color: yellow;\n  `)\n  \n  let button = [\n      ...decision_tree.map((node, i) => [\n    \"button\",\n    {style, onclick: play_fn(i)},\n    node.src\n  ])]\n\n\n  let debug = sig(false)\n  let current_node = mem(() => decision_tree[current()])\n  let options = mem(() => current_node()?.options)\n  let next_btns = mem(() => options().map((opt, i) => \n    hdom([\"button\" \n          , {\n            class: mem(() => {\n              console.log(\"running!\")\n              return `option ${i == selected() ? \"selected\" : \"\"}`\n            }),\n            index: i,\n            onclick: play_fn(opt.next)}, \n          opt.text ])))\n  \n  let s = `filter: saturate(1);`\n  \n  let container = `\n    position: fixed;\n    bottom: 2em;\n    left: 5em;\n  `\n  \n  let dec = `\n  position: fixed;\n  bottom: 3em;\n  left: 0;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  `\n  \n  let d = hdom([\"#debug\",  DebugDom, \n     [\"#container\", {style: container}, button ]],) \n  \n  let three = () => \n    hdom([\"#THREE\",  {style: s},\n     [\"#decisions\", {style: dec}, next_btns ],\n     [\"button\", {\n       style: \"position:fixed\",\n       onclick: () => debug.set(!debug())}, \"debug\"],\n          mem(() => debug() ? d() : \"\")])\n  \n  return hdom(\n    [\"div\",\n      [\"style\", css_str],\n      [\".main\",  three],\n      [\".cursor\", {style: cursor_style}]\n    ]\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "start": 0,
      "drag_x": 1013,
      "drag_y": 354,
      "focused": false,
      "cursor": 3287,
      "active": true,
      "focus": true,
      "drag_w": 600,
      "drag_h": 700
    },
    {
      "type": "code",
      "id": "he3gnn",
      "start": 5977,
      "drag_x": 1820.1371397277696,
      "drag_y": 670.9804086103186,
      "focused": false,
      "output": "\n/**\n@typedef {Object} vec3 \n@property {number} vec3.x\n@property {number} vec3.y\n@property {number} vec3.z\n\n@param {vec3} vec1\n@param {vec3} vec2\n*/\nfunction eq(vec1, vec2){\n  return vec1.x === vec2.x \n    && vec1.y == vec2.y\n    && vec1.z == vec2.z\n}\n\n\nfunction shuffle(arr) {\n  return arr.sort(() => Math.random() > .5 ? 1 : -1)\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 730
    },
    {
      "type": "code",
      "id": "v2a3aw",
      "start": 6376,
      "drag_x": 2515.8732356681644,
      "drag_y": 1120.9098588534523,
      "focused": false,
      "output": "/**\n@typedef {{\n  text: string,\n  next: number,\n  start: number,\n}} Decision \n\n@typedef {{\n  text: string,\n  start: number,\n  end: number,\n}} Subtitle\n*/\n\n/**\n@typedef {{\n  src: string,\n  options: Decision[],\n  subtitles: Subtitle[],\n  auto?: number,\n  controller: (null | {\n    play: () => void,\n    pause: () => void,\n    seek: (num: number) => void,\n    focus: (to_focus: boolean) => void\n  })\n}} SourceNode \n*/\n\n/**\n@type {SourceNode[]}\n*/\n\nlet decision_tree = await fetch(\"/fs/data/anisha_thesis_timeline_data.json\").then((res) => res.json())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 1200
    },
    {
      "type": "code",
      "id": "mf4rl",
      "start": 6948,
      "drag_x": 4393.437441085362,
      "drag_y": 2320.2884292730214,
      "focused": false,
      "output": "/**\n@description make sure video is loaded\n@param {HTMLVideoElement} video \n*/\nfunction create_video_plane(video){\n  // make a video element\n  // video will always be 4:3\n  // make plane that size\n  const texture = new THREE.VideoTexture(video)\n  \n  const geometry = new THREE.PlaneGeometry(8, 6)\n  \n  const material = new THREE.MeshBasicMaterial({\n    map: texture,\n    // opacity: .2,\n    // transparent: true,\n    // use texture of video\n  })\n  const plane = new THREE.Mesh(geometry, material);\n\n  return plane\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 970
    },
    {
      "type": "code",
      "id": "uhjqp5",
      "active": false,
      "focus": false,
      "start": 7526,
      "drag_x": 5044.745469327453,
      "drag_y": 2319.986197638788,
      "drag_w": 600,
      "drag_h": 732.8124473700041,
      "focused": false,
      "output": "/* -------------------\n.debug div\n<(cur)>\n------------------------\n.main-frame\n[ video     ][ options ]\n[           ][         ]\n[           ][         ]\n---------------------\n.bottom\n[  timeline ][subtitles]\n\n---------------------*/\ncss.push(`\n  #debug{\n    position: fixed;\n    top: 1em;\n    left: 1em;\n    width: 60vw;\n    height: 85vh;\n    border: 1px dotted white;\n    background-color: #000;\n  }\n\n  .pad {\n    padding: .5em;\n  }\n  \n  .debug-div {\n    font-family: monospace;\n    color: white;\n    padding: 10px;\n  }\n\n  .debug-div button{\n    all: unset;\n    border: 1px solid white;\n    cursor: crosshair;\n    padding: .2em;\n  }\n  \n  .debug-div button:hover {\n    background-color: white;\n    color: black;\n  }\n\n  .main-frame{\n    display: grid;\n    grid-template-columns: 60% 40%; \n    position: relative;\n  }\n\n  .options-preview {\n    padding: .5em;\n    border: 1px solid #fff8;\n  }\n\n  .options-menu {\n    background: black;\n    position: absolute;\n    top: 2em;\n    left: 2em;\n    width: 85%;\n  }\n\n  .options-grid {\n    padding: 2em;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 150px);\n    grid-gap: 1em;\n  }\n\n  .options-btn {\n    padding: 1em;\n    border: .5px solid #fff4;\n  }\n  \n  .options-btn:hover{\n    background: white;\n    color: black;\n    cursor: pointer;\n  }\n\n  .bottom {\n    width: 98%;\n    display: grid;\n    grid-template-rows: 30% 80%;\n    overflow: hidden;\n  }\n\n  .bottom .timeline-container {\n    overflow-x: scroll;\n    border: 1px solid white;\n  }\n\n  video {\n    max-width: 100%;\n  }\n\n  .auto-video {\n    width: 100px;\n    border: 1px yellow solid;\n  }\n  \n`\n)\n\nfunction DebugDom(){\n  let dt = mut(decision_tree)\n  let parent = \"/fs/media/anisha-thesis/\"\n  let cur = sig(0)\n  let showing_options = sig(false)\n  \n  let next = () => {\n    cur() + 1 >= dt.length \n    ? cur.set(0)\n    : cur.set(cur() + 1)\n  }\n  \n  let prev = () => {\n    cur() <= 0\n    ? cur.set(dt.length-1)\n    : cur.set(cur() - 1)\n  }\n\n  let src_on = (i) => parent+dt[i]?.src\n  let cur_src = mem(() => src_on(cur()))\n  let cur_options = mem(() =>dt[cur()]?.options)\n  \n  let add_to_cur = (text, next) => {\n    hide_options()\n    dt[cur()].options.push({text, next})\n  }\n\n  let set_text = (text, i) => {\n    dt[cur()].options[i].text = text\n  }\n  \n  let add_auto = (next) => {\n    hide_options()\n    dt[cur()].auto = next\n  }\n\n  let remove_auto = () => {\n    dt[cur()].auto = null\n  }\n\n  let show_options = () => {\n    showing_options.set(true)\n  }\n\n  let show_auto = () => {\n    auto_select.set(true)\n    show_options()\n  }\n\n  let hide_options = () => {\n    showing_options.set(false)\n    auto_select.set(false)\n  }\n  \n  let remove_cur_option=(i) => {\n    dt[cur()].options.splice(i, 1)\n  }\n\n    \n  let video_style = `width:80%;`\n  let video_smol  = `width: 85px;`\n\n  let options = hdom(\n    [\".options-menu\", \n     {onclick: hide_options},\n     [\".options-grid\", dt.map((node, i) => \n      [\".options-btn\", {\n        onclick: () => {\n          if (auto_select()){\n            add_auto(i)\n          }\n          else{\n            add_to_cur(\"something\", i) \n          }\n        }\n      }, node.src])]])\n\n  const options_btn = \n    (option, i) => {\n      let input = sig(option.text)\n      \n      return hdom([\n      \".options-preview\", \n        [\"button\", {onclick: () => remove_cur_option(i)}, \"xx\"],\n        [\"video\", { \n          src: src_on(option.next), \n          style: video_smol, \n          controls: true\n        }],\n      \n        [\"p.src\", dt[option.next].src],\n        [\"input\", {value: input, oninput: (e) => input.set(e.target.value)}],\n        [\"button\", {onclick: () => set_text(input(), i)}, \"save\"],\n      ])\n    }\n  \n  let save = () => {\n    // save to anisha_thesis_timeline_data.json\n    const body = {\n      content: JSON.stringify(dt, null, 2),\n    };\n\n    let path = \"data/anisha_thesis_timeline_data.json\"\n\n    fetch(\"/fs/\" + path, {\n      headers: { \"Content-Type\": \"application/json\" },\n      method: \"PUT\",\n      body: JSON.stringify(body),\n    });\n  }\n  let auto_select = sig(false)\n  let duration = sig(1)\n  let current_time = sig(0)\n  let scale = sig(200)\n  let time_to_px = (s) =>  s * scale()\n  let timeline_style = mem(() => `\n    position: relative;\n    width: ${time_to_px(duration())}px;\n    height: 100px;\n  `)\n\n  let seek_style = mem(() => `\n    position: absolute;\n    left: ${time_to_px(current_time())}px;\n    height: 80%; \n    width: 1px;\n    background-color: yellow;\n  `)\n\n  let video_ref = (viddy) => {\n    viddy.ondurationchange = (eve) => {\n      console.log(\"duration changed\", eve)\n      console.log(\"duration:::>\", viddy.duration)\n      duration.set(viddy.duration)\n    }\n\n    viddy.ontimeupdate = (e) => {\n      console.log(\"time updated\", viddy.currentTime)\n      current_time.set(viddy.currentTime)\n    }\n  }\n\n  let auto = \n    [\".auto\",\n     mem(() => \n       dt[cur()].auto != undefined \n       ? hdom(\n         [\".auto-video\",\n          [\"video\", {src: src_on(dt[cur()].auto)}],\n          [\"p\", dt[dt[cur()].auto].src]\n         ]) \n       : \"no-auto\"), \n     [\"button\", {onclick: show_auto},\"add auto\"],\n    [\"button\", {onclick: remove_auto}, \"x del x\"],\n    ]\n\n  \n  let main_frame = [\n       \".main-frame\",\n       [\"video\", {src: cur_src, style : video_style, controls: true, ref:video_ref} ],\n       [\".next\", mem(() => cur_options()?.map(options_btn)),\n         auto,\n         [\"button\", {onclick: show_options}, \"add\"]\n        ]\n     ]\n\n  let timeline = \n    [\".bottom\",\n      [\".timeline-container\",\n        [\".timeline\", {style: timeline_style}, [\".seeker\", {style: seek_style}]]],\n      [\".subtitle-container\",\n        [\"button\", \"add subtitle\"]]]\n\n  let r = () => hdom(\n      [\".debug-div\",\n         [\".title\", mem(() => dt[cur()].src)],\n         [\"button\", {onclick: save}, \"save\"],\n         // next prev\n         [\"div\", \n          [\"button\", {onclick:prev}, \"prev\"],\n          [\"span.pad\", cur],\n          [\"button\", {onclick:next}, \"next\"],\n        ],\n        main_frame,\n        timeline,\n       () => if_then([showing_options(), options])\n      ])\n  \n  return r\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0
    },
    {
      "type": "video-component",
      "id": "agbf5v",
      "start": 13610,
      "drag_x": 5661.240728311334,
      "drag_y": 1494.4676542614575,
      "drag_w": 600,
      "drag_h": 400,
      "src": "",
      "output": "",
      "active": false,
      "focus": false
    },
    {
      "type": "code",
      "id": "wcbpv2",
      "start": 13610,
      "drag_x": 5731.4967486589885,
      "drag_y": 2578.1067583454196,
      "focused": false,
      "output": "let root = \"/fs/media/anisha-thesis/\"\n\ndecision_tree.forEach((node, i) => {\n  let viddy = document.createElement(\"video\")\n  viddy.src = root + node.src\n  viddy.autoplay = true\n  let f = create_video_plane(viddy)\n  f.position.x = 0\n  scene.add(f)\n\n  viddy.onended = (e) => {\n    pause()\n    console.log(\"ended\", node.src)\n    console.log(\"auto for\", node.src, \"is\", node.auto)\n    \n    if (node.auto != undefined) {\n      // check if it is in focus...\n      if (i != current()) {\n        console.log(node.src, \"not in focus, returning\")\n        return \n      }\n      \n      current.set(node.auto)\n      decision_tree[node.auto].controller.play()\n      console.log(\"playing\", decision_tree[node.auto].src)\n    }\n  }\n\n  if(node.src.includes(\"OP\")){\n    viddy.loop = true\n  }\n  // viddy.ontimeupdate = (e) => {\n  //   // loop\n  //   if(viddy.duration - viddy.currentTime <= 1 \n  //      && node.src.includes(\"OP\")) {\n  //       viddy.currentTime = 0;\n  //       viddy.play();\n  //   }\n  // }\n\n  let pause = () => {\n    node.controller?.focus(false)\n    viddy.volume = 0;\n    viddy.playbackRate = 0.001\n    viddy.currentTime = 0\n  }\n\n  let play = () => {\n    console.log(\"playing\", node.src)\n    node.controller?.focus(true)\n    viddy.currentTime = 0\n    viddy.play();\n    viddy.volume = 1;\n    viddy.playbackRate = 1\n  }\n\n  node.controller = {\n    viddy,\n    // on play check if there is an auto, and play that too so autplay works\n    play,\n    pause, \n    seek: (t) => viddy.currentTime = t,\n    focus: (bool) => {\n      if (bool){\n        console.log(\"focusing\", node.src)\n        f.position.x = 0\n        f.position.z = 0\n      } else{\n        // calculate position based on some logic...\n        f.position.x = 12 + i*2 \n        f.position.z = -((i+1)/10)\n      }\n    }\n  }\n})\n\nrender(Root, document.body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_w": 600,
      "drag_h": 530
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -962.9999999999995,
      "initialY": -303.99999999999983,
      "initialZoom": 1
    },
    "buffer": [
      -1,
      -1,
      -1,
      -1,
      -1
    ]
  }
}